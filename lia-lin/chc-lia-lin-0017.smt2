;; Original file: phi_39.smt2
(set-logic HORN)
(declare-fun REC_f_ (Int Int ) Bool)
(declare-fun REC_f_f (Int Int Int Int ) Bool)
(declare-fun REC__f (Int Int ) Bool)


(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (let ((a!1 (and (not (= (+ A B) C))
                  (= (+ A (- 1)) D)
                  (REC_f_ D B)
                  (<= C 1)
                  (not (<= A 0))
                  (= A C))))
    (=> a!1 false))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int))
  (let ((a!1 (and (not (= (+ A B) (+ C D)))
                  (= (+ A (- 1)) E)
                  (= (+ C (- 1)) F)
                  (REC_f_f E B F D)
                  (not (<= C 1))
                  (not (<= A 0))
                  (= A C))))
    (=> a!1 false))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (let ((a!1 (and (not (= A (+ B C)))
                  (= (+ B (- 1)) D)
                  (REC__f D C)
                  (not (<= B 1))
                  (<= A 0)
                  (= A B))))
    (=> a!1 false))))
(assert (forall ((B Int) (D Int) (C Int) (E Int) (A Int))
  (let ((a!1 (and (= (+ B D) C)
                  (= (+ B (- 1)) E)
                  (REC__f E D)
                  (not (<= B 1))
                  (<= A 0))))
    (=> a!1 (REC_f_f A A B C)))))
(assert (forall ((B Int) (A Int)) (=> (and (<= B 1) (<= A 0)) (REC_f_f A A B B))))
(assert (forall ((A Int) (E Int) (B Int) (C Int) (F Int) (D Int) (G Int) (H Int))
  (let ((a!1 (and (= (+ A E) B)
                  (= (+ C F) D)
                  (= (+ A (- 1)) G)
                  (= (+ C (- 1)) H)
                  (REC_f_f G E H F)
                  (not (<= C 1))
                  (not (<= A 0)))))
    (=> a!1 (REC_f_f A B C D)))))
(assert (forall ((A Int) (D Int) (B Int) (E Int) (C Int))
  (let ((a!1 (and (= (+ A D) B)
                  (= (+ A (- 1)) E)
                  (REC_f_ E D)
                  (<= C 1)
                  (not (<= A 0)))))
    (=> a!1 (REC_f_f A B C C)))))
(assert (forall ((A Int)) (=> (<= A 0) (REC_f_ A A))))
(assert (forall ((A Int) (C Int) (B Int) (D Int))
  (let ((a!1 (and (= (+ A C) B) (= (+ A (- 1)) D) (REC_f_ D C) (not (<= A 0)))))
    (=> a!1 (REC_f_ A B)))))
(assert (forall ((A Int)) (=> (<= A 1) (REC__f A A))))
(assert (forall ((A Int) (C Int) (B Int) (D Int))
  (let ((a!1 (and (= (+ A C) B) (= (+ A (- 1)) D) (REC__f D C) (not (<= A 1)))))
    (=> a!1 (REC__f A B)))))
(check-sat)

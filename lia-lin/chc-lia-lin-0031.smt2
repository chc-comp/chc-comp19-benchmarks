;; Original file: adr_76.smt2
(set-logic HORN)
(declare-fun |loop$unknown:2| (Int Int) Bool)
(declare-fun |zip$unknown:5| (Int Int Int) Bool)


(assert (forall ((|$knormal:1| Int)
         (|$V-reftype:13| Int)
         (|$knormal:2| Int)
         (|$alpha-1:x| Int))
  (=> (and (= |$knormal:1| 1)
           (= |$V-reftype:13| |$knormal:2|)
           (|loop$unknown:2| |$knormal:2| |$knormal:1|)
           true)
      (|loop$unknown:2| |$V-reftype:13| |$alpha-1:x|))))
(assert (forall ((|$knormal:4| Int)
         (|$alpha-3:y| Int)
         (|$knormal:3| Int)
         (|$alpha-2:x| Int)
         (|$knormal:11| Int)
         (|$V-reftype:21| Int)
         (|$knormal:12| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:4|)) (= |$alpha-3:y| 0))
                  (= (not (= 0 |$knormal:3|)) (= |$alpha-2:x| 0))
                  (= |$knormal:11| 1)
                  (= |$V-reftype:21| |$knormal:12|)
                  (not (not (= 0 |$knormal:3|)))
                  (not (= 0 |$knormal:4|))
                  true
                  true
                  (|loop$unknown:2| |$knormal:12| |$knormal:11|))))
    (=> a!1
        (|zip$unknown:5| |$V-reftype:21| |$alpha-3:y| |$alpha-2:x|)))))
(assert (forall ((|$knormal:3| Int)
         (|$alpha-2:x| Int)
         (|$knormal:14| Int)
         (|$knormal:13| Int)
         (|$alpha-3:y| Int)
         (|$V-reftype:18| Int)
         (|$knormal:15| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:3|)) (= |$alpha-2:x| 0))
                  (= |$knormal:14| 1)
                  (= (not (= 0 |$knormal:13|)) (= |$alpha-3:y| 0))
                  (= |$V-reftype:18| |$knormal:15|)
                  (not (not (= 0 |$knormal:13|)))
                  (not (= 0 |$knormal:3|))
                  true
                  true
                  (|loop$unknown:2| |$knormal:15| |$knormal:14|))))
    (=> a!1
        (|zip$unknown:5| |$V-reftype:18| |$alpha-3:y| |$alpha-2:x|)))))
(assert (forall ((|$knormal:7| Int)
         (|$alpha-3:y| Int)
         (|$knormal:5| Int)
         (|$alpha-2:x| Int)
         (|$knormal:4| Int)
         (|$knormal:3| Int)
         (|$V-reftype:24| Int)
         (|$knormal:9| Int))
  (let ((a!1 (and (= |$knormal:7| (- |$alpha-3:y| 1))
                  (= |$knormal:5| (- |$alpha-2:x| 1))
                  (= (not (= 0 |$knormal:4|)) (= |$alpha-3:y| 0))
                  (= (not (= 0 |$knormal:3|)) (= |$alpha-2:x| 0))
                  (= |$V-reftype:24| (+ 1 |$knormal:9|))
                  (not (not (= 0 |$knormal:4|)))
                  (not (not (= 0 |$knormal:3|)))
                  (|zip$unknown:5| |$knormal:9|
                                   |$knormal:7|
                                   |$knormal:5|)
                  true
                  true)))
    (=> a!1
        (|zip$unknown:5| |$V-reftype:24| |$alpha-3:y| |$alpha-2:x|)))))
(assert (forall ((|$knormal:3| Int)
         (|$alpha-2:x| Int)
         (|$knormal:13| Int)
         (|$alpha-3:y| Int)
         (|$V-reftype:16| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:3|)) (= |$alpha-2:x| 0))
                  (= (not (= 0 |$knormal:13|)) (= |$alpha-3:y| 0))
                  (= |$V-reftype:16| 0)
                  (not (= 0 |$knormal:3|))
                  (not (= 0 |$knormal:13|))
                  true
                  true)))
    (=> a!1
        (|zip$unknown:5| |$V-reftype:16| |$alpha-3:y| |$alpha-2:x|)))))
(assert (forall ((|$knormal:20| Int) (|$knormal:18| Int) (|$alpha-4:n| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:20|))
                     (= |$knormal:18| |$alpha-4:n|))
                  (not (not (= 0 |$knormal:20|)))
                  (|zip$unknown:5| |$knormal:18|
                                   |$alpha-4:n|
                                   |$alpha-4:n|))))
    (=> a!1 false))))
(check-sat)

;; Original file: faddnaddn.smt2
(set-logic HORN)
(declare-fun P0 (Int Int Int) Bool)
(declare-fun P3 (Int Int) Bool)
(declare-fun P7 (Int Int Int) Bool)
(declare-fun P1 (Int) Bool)
(declare-fun P4 (Int Int) Bool)
(declare-fun P2 (Int) Bool)
(declare-fun P5 (Int Int) Bool)
(declare-fun P6 (Int Int Int) Bool)
(assert (forall ((x0 Int)) (=> (= x0 0) (P2 x0))))
(assert (forall ((x0 Int) (x1 Int) (x2 Int)) (=> (and (P3 0 x2) (= x1 0)) (P5 x0 x1))))
(assert (forall ((x2 Int) (x0 Int) (x1 Int) (x3 Int)) (=> (and (P3 0 x3) (P7 x2 0 x3)) (P0 x2 x0 x1))))
(assert (forall ((x1 Int) (x2 Int) (x0 Int)) (=> (and (P1 x1) (P4 x1 x2) (= x0 (+ x1 x2))) (P6 x1 x2 x0))))
(assert (forall ((x0 Int)) (=> true (P1 x0))))
(assert (forall ((x0 Int)) (=> true (P1 x0))))
(assert (forall ((x0 Int) (x1 Int)) (=> (P2 x1) (P4 x0 x1))))
(assert (forall ((x1 Int) (x2 Int) (x0 Int)) (=> (and (P2 x1) (P6 x0 x1 x2)) (P3 x1 x2))))
(assert (forall ((x0 Int) (x2 Int) (x1 Int)) (=> (P5 x1 x2) (P4 x0 x2))))
(assert (forall ((x0 Int) (x2 Int) (x3 Int) (x1 Int)) (=> (and (P5 x0 x2) (P6 x1 x2 x3)) (P7 x0 x2 x3))))
(assert (forall ((x0 Int) (x2 Int) (x1 Int)) (=> (and (P3 0 x0) (P7 x1 0 x2) (or (< x0 x2) (> x0 x2))) false)))
(check-sat)

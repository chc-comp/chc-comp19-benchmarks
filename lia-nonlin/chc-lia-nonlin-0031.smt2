;; Original file: apply.smt2
(set-logic HORN)
(declare-fun P5 (Int Int) Bool)
(declare-fun P4 (Int Int) Bool)
(declare-fun P0 (Int) Bool)
(declare-fun P1 (Int Int) Bool)
(declare-fun P2 (Int) Bool)
(declare-fun P3 (Int Int Int) Bool)
(declare-fun P8 (Int) Bool)
(declare-fun P6 (Int Int Int) Bool)
(declare-fun P7 (Int Int) Bool)
(assert (forall ((x1 Int) (x0 Int)) (=> (P5 x0 x1) (P2 x1))))
(assert (forall ((x0 Int) (x1 Int) (x2 Int)) (=> (and (P5 x0 x1) (P4 x1 x2)) (P6 x0 x1 x2))))
(assert (forall ((x1 Int) (x2 Int) (x0 Int)) (=> (and (P0 x1) (P1 x1 x2) (= x1 x2)) (P3 x1 x2 x0))))
(assert (forall ((x0 Int)) (=> (P8 x0) (P0 x0))))
(assert (forall ((x0 Int) (x1 Int)) (=> (and (P8 x0) (P2 x1)) (P1 x0 x1))))
(assert (forall ((x1 Int) (x2 Int) (x0 Int)) (=> (and (P8 x0) (P2 x1) (P3 x0 x1 x2)) (P4 x1 x2))))
(assert (forall ((x0 Int) (x1 Int)) (=> (P8 x1) (P5 x0 x1))))
(assert (forall ((x0 Int) (x2 Int) (x1 Int) (x3 Int)) (=> (and (P8 x2) (P6 x1 x2 x3) (= x0 (+ 1 x2))) (P8 x0))))
(assert (forall ((x1 Int) (x4 Int) (x3 Int) (x0 Int) (x2 Int)) (=> (and (P8 x1) (P6 x0 x1 x2) (P7 x3 x4) (= x3 (+ 1 x1))) (P7 x1 x4))))
(assert (forall ((x0 Int)) (=> (= x0 0) (P8 x0))))
(assert (forall ((x0 Int) (x1 Int)) (=> (and (P0 x0) (P1 x0 x1) (or (< x0 x1) (> x0 x1))) false)))
(check-sat)

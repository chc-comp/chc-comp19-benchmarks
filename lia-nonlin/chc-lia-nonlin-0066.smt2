;; Original file: phi_58.smt2
(set-logic HORN)
(declare-fun REC_f_f (Int Int Int Int ) Bool)
(declare-fun REC_f_ (Int Int ) Bool)
(declare-fun REC__f (Int Int ) Bool)


(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int))
  (let ((a!1 (not (>= (+ E (- 100) (- 1)) 0))))
  (let ((a!2 (and (not (= A B))
                  (REC_f_f C A D B)
                  (= (+ E 11) F)
                  (= (+ 11 G) H)
                  (REC_f_f F C H D)
                  (>= (+ (- 101 G) (- 1)) 0)
                  a!1
                  (= E G))))
    (=> a!2 false)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (not (= A (+ B (- 10)))))
        (a!2 (not (>= (+ (- 101 B) (- 1)) 0)))
        (a!3 (not (>= (+ D (- 100) (- 1)) 0))))
    (=> (and a!1 (REC_f_ C A) (= (+ D 11) E) (REC_f_ E C) a!2 a!3 (= D B))
        false))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (not (= (+ A (- 10)) B))))
  (let ((a!2 (and a!1
                  (REC__f C B)
                  (= (+ 11 D) E)
                  (REC__f E C)
                  (>= (+ (- 101 D) (- 1)) 0)
                  (>= (+ A (- 100) (- 1)) 0)
                  (= A D))))
    (=> a!2 false)))))
(assert (forall ((A Int) (B Int))
  (let ((a!1 (and (= (+ A (- 10)) B) (>= (+ A (- 100) (- 1)) 0))))
    (=> a!1 (REC_f_ A B)))))
(assert (forall ((C Int) (B Int) (A Int) (D Int))
  (let ((a!1 (not (>= (+ A (- 100) (- 1)) 0))))
    (=> (and (REC_f_ C B) (= (+ A 11) D) (REC_f_ D C) a!1) (REC_f_ A B)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (let ((a!1 (not (>= (+ (- 101 C) (- 1)) 0))))
  (let ((a!2 (and (= (+ A (- 10)) B)
                  (= (+ C (- 10)) D)
                  a!1
                  (>= (+ A (- 100) (- 1)) 0))))
    (=> a!2 (REC_f_f A B C D))))))
(assert (forall ((A Int) (B Int) (E Int) (D Int) (C Int) (F Int))
  (let ((a!1 (and (= (+ A (- 10)) B)
                  (REC__f E D)
                  (= (+ 11 C) F)
                  (REC__f F E)
                  (>= (+ (- 101 C) (- 1)) 0)
                  (>= (+ A (- 100) (- 1)) 0))))
    (=> a!1 (REC_f_f A B C D)))))
(assert (forall ((C Int) (D Int) (E Int) (B Int) (A Int) (F Int))
  (let ((a!1 (not (>= (+ (- 101 C) (- 1)) 0)))
        (a!2 (not (>= (+ A (- 100) (- 1)) 0))))
  (let ((a!3 (and (= (+ C (- 10)) D)
                  (REC_f_ E B)
                  (= (+ A 11) F)
                  (REC_f_ F E)
                  a!1
                  a!2)))
    (=> a!3 (REC_f_f A B C D))))))
(assert (forall ((E Int) (B Int) (F Int) (D Int) (A Int) (G Int) (C Int) (H Int))
  (let ((a!1 (not (>= (+ A (- 100) (- 1)) 0))))
  (let ((a!2 (and (REC_f_f E B F D)
                  (= (+ A 11) G)
                  (= (+ 11 C) H)
                  (REC_f_f G E H F)
                  (>= (+ (- 101 C) (- 1)) 0)
                  a!1)))
    (=> a!2 (REC_f_f A B C D))))))
(assert (forall ((C Int) (B Int) (A Int) (D Int))
  (let ((a!1 (and (REC__f C B)
                  (= (+ 11 A) D)
                  (REC__f D C)
                  (>= (+ (- 101 A) (- 1)) 0))))
    (=> a!1 (REC__f A B)))))
(assert (forall ((A Int) (B Int))
  (let ((a!1 (not (>= (+ (- 101 A) (- 1)) 0))))
  (let ((a!2 (and (= (+ A (- 10)) B) a!1)))
    (=> a!2 (REC__f A B))))))
(check-sat)

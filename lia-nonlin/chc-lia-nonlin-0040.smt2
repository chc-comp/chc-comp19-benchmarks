;; Original file: lock.smt2
(set-logic HORN)
(declare-fun P0 (Int) Bool)
(declare-fun P2 (Int) Bool)
(declare-fun P1 (Int Int) Bool)
(declare-fun P4 (Int) Bool)
(declare-fun P5 (Int Int) Bool)
(declare-fun P3 (Int Int) Bool)
(declare-fun P6 (Int) Bool)
(declare-fun P7 (Int Int) Bool)
(declare-fun P8 (Int Int Int) Bool)
(declare-fun P9 (Int Int Int) Bool)
(assert (forall ((x1 Int) (x0 Int)) (=> (and (P0 x1) (= x0 1) (= x1 0)) (P1 x1 x0))))
(assert (forall ((x1 Int) (x0 Int)) (=> (and (P2 x1) (= x0 0) (= x1 1)) (P3 x1 x0))))
(assert (forall ((x1 Int) (x0 Int)) (=> (and (P4 x0) (P5 x0 x1) (>= x0 1)) (P0 x1))))
(assert (forall ((x0 Int) (x1 Int) (x2 Int)) (=> (and (P4 x0) (P5 x0 x1) (P1 x1 x2) (>= x0 1)) (P8 x0 x1 x2))))
(assert (forall ((x1 Int) (x0 Int) (x2 Int)) (=> (and (P4 x1) (P5 x1 x0) (P5 x1 x2) (<= x1 0) (= x2 x0)) (P8 x1 x0 x2))))
(assert (forall ((x1 Int) (x0 Int)) (=> (and (P6 x0) (P7 x0 x1) (>= x0 1)) (P2 x1))))
(assert (forall ((x0 Int) (x1 Int) (x2 Int)) (=> (and (P6 x0) (P7 x0 x1) (P3 x1 x2) (>= x0 1)) (P9 x0 x1 x2))))
(assert (forall ((x1 Int) (x0 Int) (x2 Int)) (=> (and (P6 x1) (P7 x1 x0) (P7 x1 x2) (<= x1 0) (= x2 x0)) (P9 x1 x0 x2))))
(assert (forall ((x0 Int)) (=> true (P4 x0))))
(assert (forall ((x0 Int) (x1 Int)) (=> (= x1 0) (P5 x0 x1))))
(assert (forall ((x0 Int) (x1 Int)) (=> (P8 x0 0 x1) (P6 x0))))
(assert (forall ((x0 Int) (x1 Int)) (=> (P8 x0 0 x1) (P7 x0 x1))))
(assert (forall ((x0 Int)) (=> (and (P0 x0) (or (< x0 0) (> x0 0))) false)))
(assert (forall ((x0 Int)) (=> (and (P2 x0) (or (< x0 1) (> x0 1))) false)))
(assert (forall ((x2 Int) (x0 Int) (x1 Int)) (=> (and (P8 x0 0 x1) (P9 x0 x1 x2) (or (< x2 0) (> x2 0))) false)))
(check-sat)

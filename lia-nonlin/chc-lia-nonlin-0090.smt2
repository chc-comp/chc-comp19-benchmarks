;; Original file: adr_105.smt2
(set-logic HORN)
(declare-fun |loop$unknown:3| (Int Int Int) Bool)


(assert (forall ((|$knormal:3| Int)
         (|$alpha-1:x| Int)
         (|$knormal:2| Int)
         (|$knormal:10| Int)
         (|$alpha-2:i| Int)
         (|$knormal:1| Int)
         (|$V-reftype:17| Int)
         (|$knormal:12| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:3|)) (> |$alpha-1:x| 2))
                  (= (not (= 0 |$knormal:2|)) (< |$alpha-1:x| 1))
                  (= |$knormal:10| (- |$alpha-2:i| 1))
                  (= (not (= 0 |$knormal:1|)) (< |$alpha-2:i| 0))
                  (= |$V-reftype:17| |$knormal:12|)
                  (not (not (= 0 |$knormal:2|)))
                  (not (not (= 0 |$knormal:1|)))
                  (not (= 0 |$knormal:3|))
                  (|loop$unknown:3| |$knormal:12|
                                    |$knormal:10|
                                    |$alpha-1:x|)
                  true
                  true)))
    (=> a!1
        (|loop$unknown:3| |$V-reftype:17| |$alpha-2:i| |$alpha-1:x|)))))
(assert (forall ((|$knormal:2| Int)
         (|$alpha-1:x| Int)
         (|$knormal:15| Int)
         (|$alpha-2:i| Int)
         (|$knormal:13| Int)
         (|$knormal:1| Int)
         (|$V-reftype:14| Int)
         (|$knormal:17| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:2|)) (< |$alpha-1:x| 1))
                  (= |$knormal:15| (- |$alpha-2:i| 1))
                  (= |$knormal:13| (- |$alpha-1:x| 1))
                  (= (not (= 0 |$knormal:1|)) (< |$alpha-2:i| 0))
                  (= |$V-reftype:14| |$knormal:17|)
                  (not (not (= 0 |$knormal:1|)))
                  (not (= 0 |$knormal:2|))
                  (|loop$unknown:3| |$knormal:17|
                                    |$knormal:15|
                                    |$knormal:13|)
                  true
                  true)))
    (=> a!1
        (|loop$unknown:3| |$V-reftype:14| |$alpha-2:i| |$alpha-1:x|)))))
(assert (forall ((|$knormal:6| Int)
         (|$alpha-2:i| Int)
         (|$knormal:4| Int)
         (|$alpha-1:x| Int)
         (|$knormal:3| Int)
         (|$knormal:2| Int)
         (|$knormal:1| Int)
         (|$V-reftype:20| Int)
         (|$knormal:8| Int))
  (let ((a!1 (and (= |$knormal:6| (- |$alpha-2:i| 1))
                  (= |$knormal:4| (- 3 |$alpha-1:x|))
                  (= (not (= 0 |$knormal:3|)) (> |$alpha-1:x| 2))
                  (= (not (= 0 |$knormal:2|)) (< |$alpha-1:x| 1))
                  (= (not (= 0 |$knormal:1|)) (< |$alpha-2:i| 0))
                  (= |$V-reftype:20| |$knormal:8|)
                  (not (not (= 0 |$knormal:3|)))
                  (not (not (= 0 |$knormal:2|)))
                  (not (not (= 0 |$knormal:1|)))
                  (|loop$unknown:3| |$knormal:8|
                                    |$knormal:6|
                                    |$knormal:4|)
                  true
                  true)))
    (=> a!1
        (|loop$unknown:3| |$V-reftype:20| |$alpha-2:i| |$alpha-1:x|)))))
(assert (forall ((|$knormal:1| Int)
         (|$alpha-2:i| Int)
         (|$V-reftype:10| Int)
         (|$alpha-1:x| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (< |$alpha-2:i| 0))
                  (= |$V-reftype:10| |$alpha-1:x|)
                  (not (= 0 |$knormal:1|))
                  true
                  true)))
    (=> a!1
        (|loop$unknown:3| |$V-reftype:10| |$alpha-2:i| |$alpha-1:x|)))))
(assert (forall ((|$knormal:29| Int)
         (|$knormal:27| Int)
         (|$knormal:24| Int)
         (|$knormal:23| Int)
         (|$knormal:21| Int)
         (|$knormal:18| Int)
         (|$alpha-4:$$tmp::1| Int)
         (|$alpha-3:n| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:29|)) (>= |$knormal:27| 3))
                  (= |$knormal:24| 3)
                  (= (not (= 0 |$knormal:23|)) (>= |$knormal:21| 0))
                  (= |$knormal:18| 1)
                  (= |$alpha-4:$$tmp::1| 1)
                  (not (not (= 0 |$knormal:23|)))
                  (not (= 0 |$knormal:29|))
                  (|loop$unknown:3| |$knormal:27|
                                    |$alpha-3:n|
                                    |$knormal:24|)
                  (|loop$unknown:3| |$knormal:21|
                                    |$alpha-3:n|
                                    |$knormal:18|))))
    (=> a!1 false))))
(assert (forall ((|$knormal:29| Int)
         (|$knormal:27| Int)
         (|$knormal:24| Int)
         (|$knormal:18| Int)
         (|$alpha-4:$$tmp::1| Int)
         (|$alpha-3:n| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:29|)) (>= |$knormal:27| 3))
                  (= |$knormal:24| 3)
                  (= |$knormal:18| 1)
                  (= |$alpha-4:$$tmp::1| 1)
                  (not (= 0 |$knormal:29|))
                  (|loop$unknown:3| |$knormal:27|
                                    |$alpha-3:n|
                                    |$knormal:24|)
                  (not true))))
    (=> a!1 true))))
(assert (forall ((|$knormal:29| Int)
         (|$knormal:27| Int)
         (|$knormal:24| Int)
         (|$knormal:18| Int)
         (|$alpha-4:$$tmp::1| Int)
         (|$alpha-3:n| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:29|)) (>= |$knormal:27| 3))
                  (= |$knormal:24| 3)
                  (= |$knormal:18| 1)
                  (= |$alpha-4:$$tmp::1| 1)
                  (not (= 0 |$knormal:29|))
                  (|loop$unknown:3| |$knormal:27|
                                    |$alpha-3:n|
                                    |$knormal:24|)
                  (not true))))
    (=> a!1 true))))
(assert (forall ((|$knormal:29| Int)
         (|$knormal:27| Int)
         (|$knormal:24| Int)
         (|$alpha-3:n| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:29|)) (>= |$knormal:27| 3))
                  (= |$knormal:24| 3)
                  (not (not (= 0 |$knormal:29|)))
                  (|loop$unknown:3| |$knormal:27|
                                    |$alpha-3:n|
                                    |$knormal:24|))))
    (=> a!1 false))))
(check-sat)

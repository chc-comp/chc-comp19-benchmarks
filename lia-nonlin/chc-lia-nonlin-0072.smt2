;; Original file: adr_93.smt2
(set-logic HORN)
(declare-fun |f$unknown:2| (Int Int) Bool)
(declare-fun |f$unknown:4| (Int Int) Bool)
(declare-fun |succ$unknown:6| (Int Int) Bool)


(assert (forall ((|$knormal:1| Int) (|$alpha-2:x| Int) (|$knormal:3| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (not (not (= 0 |$knormal:1|)))
                  true
                  (|f$unknown:2| |$knormal:3| |$alpha-2:x|)
                  true
                  (not true))))
    (=> a!1 true))))
(assert (forall ((|$knormal:1| Int) (|$alpha-2:x| Int) (|$knormal:3| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (not (not (= 0 |$knormal:1|)))
                  true
                  (|f$unknown:2| |$knormal:3| |$alpha-2:x|)
                  true
                  (not true))))
    (=> a!1 true))))
(assert (forall ((|$knormal:1| Int)
         (|$alpha-2:x| Int)
         (|$knormal:3| Int)
         (|$V-reftype:3| Int)
         (|$alpha-1:g| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (not (not (= 0 |$knormal:1|)))
                  true
                  (|f$unknown:2| |$knormal:3| |$alpha-2:x|)
                  (|f$unknown:2| |$V-reftype:3| |$alpha-1:g|)
                  true)))
    (=> a!1 (|f$unknown:2| |$V-reftype:3| |$alpha-1:g|)))))
(assert (forall ((|$knormal:1| Int)
         (|$alpha-2:x| Int)
         (|$V-reftype:7| Int)
         (|$knormal:2| Int)
         (|$knormal:3| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (not (not (= 0 |$knormal:1|)))
                  (|f$unknown:4| |$V-reftype:7| |$knormal:2|)
                  true
                  (|f$unknown:2| |$knormal:3| |$alpha-2:x|)
                  true)))
    (=> a!1 (|f$unknown:2| |$V-reftype:7| |$knormal:2|)))))
(assert (forall ((|$V-reftype:13| Int) (succ Int))
  (=> (and (|succ$unknown:6| |$V-reftype:13| succ) true)
      (|f$unknown:2| |$V-reftype:13| succ))))
(assert (forall ((|$knormal:1| Int)
         (|$alpha-2:x| Int)
         (|$V-reftype:16| Int)
         (|$knormal:8| Int)
         (|$knormal:3| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (= |$V-reftype:16| |$knormal:8|)
                  (not (not (= 0 |$knormal:1|)))
                  (|f$unknown:4| |$knormal:8| |$knormal:3|)
                  true
                  (|f$unknown:2| |$knormal:3| |$alpha-2:x|))))
    (=> a!1 (|f$unknown:4| |$V-reftype:16| |$alpha-2:x|)))))
(assert (forall ((|$knormal:1| Int) (|$alpha-2:x| Int) (|$knormal:3| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (not (not (= 0 |$knormal:1|)))
                  true
                  (|f$unknown:2| |$knormal:3| |$alpha-2:x|)
                  (not true))))
    (=> a!1 true))))
(assert (forall ((|$knormal:1| Int)
         (|$alpha-2:x| Int)
         (|$V-reftype:15| Int)
         (|$knormal:9| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:1|)) (>= |$alpha-2:x| 0))
                  (= |$V-reftype:15| |$knormal:9|)
                  (not (= 0 |$knormal:1|))
                  true
                  (|f$unknown:2| |$knormal:9| |$alpha-2:x|))))
    (=> a!1 (|f$unknown:4| |$V-reftype:15| |$alpha-2:x|)))))
(assert (forall ((|$knormal:14| Int) (|$knormal:12| Int) (|$alpha-4:n| Int))
  (let ((a!1 (and (= (not (= 0 |$knormal:14|)) (>= |$knormal:12| 0))
                  (not (not (= 0 |$knormal:14|)))
                  (|f$unknown:4| |$knormal:12| |$alpha-4:n|))))
    (=> a!1 false))))
(assert (forall ((|$V-reftype:17| Int) (|$alpha-3:x| Int))
  (=> (and (= |$V-reftype:17| (+ |$alpha-3:x| 1)) true)
      (|succ$unknown:6| |$V-reftype:17| |$alpha-3:x|))))
(check-sat)
